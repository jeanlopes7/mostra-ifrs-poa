<?php

namespace DoctrineProxies\__CG__\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Avaliador extends \Entity\Avaliador implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setTipoServidor($tipoServidor)
    {
        $this->__load();
        return parent::setTipoServidor($tipoServidor);
    }

    public function getTipoServidor()
    {
        $this->__load();
        return parent::getTipoServidor();
    }

    public function setFormacao($formacao)
    {
        $this->__load();
        return parent::setFormacao($formacao);
    }

    public function getFormacao()
    {
        $this->__load();
        return parent::getFormacao();
    }

    public function setStatus($status)
    {
        $this->__load();
        return parent::setStatus($status);
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function setUsuario(\Entity\Usuario $fkUsuario)
    {
        $this->__load();
        return parent::setUsuario($fkUsuario);
    }

    public function getUsuario()
    {
        $this->__load();
        return parent::getUsuario();
    }

    public function setCampus(\Entity\Campus $fkCampus = NULL)
    {
        $this->__load();
        return parent::setCampus($fkCampus);
    }

    public function getCampus()
    {
        $this->__load();
        return parent::getCampus();
    }

    public function addSessoes(\Entity\Sessao $fkSessao)
    {
        $this->__load();
        return parent::addSessoes($fkSessao);
    }

    public function removeSessoes(\Entity\Sessao $fkSessao)
    {
        $this->__load();
        return parent::removeSessoes($fkSessao);
    }

    public function getsessoes()
    {
        $this->__load();
        return parent::getsessoes();
    }

    public function addAvaliadorArea(\Entity\AvaliadorArea $avaliadorArea)
    {
        $this->__load();
        return parent::addAvaliadorArea($avaliadorArea);
    }

    public function getAvaliadorArea()
    {
        $this->__load();
        return parent::getAvaliadorArea();
    }

    public function jsonSerialize()
    {
        $this->__load();
        return parent::jsonSerialize();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'tipoServidor', 'formacao', 'status', 'usuario', 'campus', 'sessoes', 'avaliadorArea');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}